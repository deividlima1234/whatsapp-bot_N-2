require('dotenv').config();
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode');
const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

// Configuraci√≥n de API de Gemini
const API_URL = process.env.API_URL;
const API_KEY = process.env.API_KEY;

if (!API_KEY || !API_URL) {
    console.error("‚ùå ERROR: API_KEY o API_URL no est√°n configuradas.");
    process.exit(1);
}

console.log("üîë API_KEY cargada:", API_KEY ? "S√≠" : "No");
console.log("üåç API_URL cargada:", API_URL ? "S√≠" : "No");

const historialChats = {};

const client = new Client({
    puppeteer: { args: ["--no-sandbox", "--disable-setuid-sandbox"] },
    authStrategy: new LocalAuth()
});

// üì≤ Generar el c√≥digo QR
client.on('qr', async qr => {
    console.log("üì± Escanea este c√≥digo QR para iniciar sesi√≥n:");
    console.log(await qrcode.toString(qr, { type: 'terminal', small: true }));
});

// ‚úÖ Cliente listo
client.on('ready', () => console.log('‚úÖ Bot de WhatsApp est√° listo!'));

// üì© Gesti√≥n de mensajes
client.on('message', async message => {
    console.log(`üì© Mensaje recibido de ${message.from}: ${message.body}`);

    const contact = await message.getContact();
    const nombreContacto = contact.pushname || contact.name || message._data.notifyName || null;

    // Guardar el historial del chat
    if (!historialChats[message.from]) {
        historialChats[message.from] = [];
    }
    historialChats[message.from].push(message.body);
    if (historialChats[message.from].length > 10) {
        historialChats[message.from].shift();
    }

    // Responder el mensaje
    let respuesta = obtenerInformacionEmpresa(message.body.toLowerCase()) || await obtenerRespuestaIA(message.from, nombreContacto);

    console.log(`ü§ñ Respuesta de Eddam: ${respuesta}`);
    message.reply(respuesta || "‚ö†Ô∏è No entend√≠, dime de otra forma.");
});

// üß† Base de respuestas predefinidas
const respuestas = {
    "qui√©n eres": "üëã Hola, soy *Eddam*, el asistente virtual de *Tecno Digital Per√∫ EIRL*. Estoy aqu√≠ para ayudarte con cualquier consulta sobre nuestros servicios.",
    "waCRM": "üìã *WaCRM* incluye:\n‚úÖ Filtros de chat\n‚úÖ Transmisi√≥n masiva\n‚úÖ Bot con respuesta autom√°tica\n‚úÖ Guardia de grupo\n‚úÖ Horario programado\n‚úÖ Recordatorio de actividades\n‚úÖ Respuestas r√°pidas\n‚úÖ Extractor de datos\n‚úÖ Utilidades de grupo\n‚úÖ Herramientas para desenfocar, generar enlaces y enviar mensajes directos.",
    "waSender": "üì© *WaSender* incluye:\n‚úÖ Auto - Respuestas Ilimitadas\n‚úÖ Env√≠os con fotos, videos y documentos\n‚úÖ Calentador de cuentas\n‚úÖ M√∫ltiples cuentas de WhatsApp\n‚úÖ Filtro de N√∫meros y Anti-Bloqueos\n‚úÖ Publicaci√≥n en grupos masivos\n‚úÖ Capturador de contactos de Google Maps.",
    "zaptech": "ü§ñ *ZapTech (SuperWasap)* es la combinaci√≥n de WaCRM y WaSender, ideal para empresas grandes, ofreciendo:\n‚úÖ ChatBot con IA\n‚úÖ Env√≠os masivos avanzados\n‚úÖ Multicuenta/multiagente\n‚úÖ Calentador comunitario.",
    "superwasap + crm": "üöÄ *SuperWasap + CRM* es el mejor automatizador de env√≠os masivos por WhatsApp con funciones √∫nicas:\n‚úÖ Texto, im√°genes, videos y m√°s\n‚úÖ Funci√≥n Anti-Ban\n‚úÖ Miles de clientes internacionales\n‚úÖ Licencia anual por *$100* incluyendo IGV.",
    "horario": "üìÖ Nuestro horario de atenci√≥n es:\nLunes a Viernes: 08:30 - 18:00\nS√°bados y Domingos: 09:30 - 13:00",
    "soporte": "üõ†Ô∏è *Soporte T√©cnico Premium por WhatsApp:*\nLunes a S√°bado: 08:00 - 20:00\nüì≤ WhatsApp: +51941180300",
    "pago": "üí∞ *M√©todos de pago disponibles:*\nüì≤ *YAPE - PLIN* : +51941180300 / +51985300000\nüè¶ *BBVA Cuenta Corriente Soles:* 011764 000100011187 80\nA nombre de: *Tecno Digital Peru EIRL*"
};

// üîç Obtener informaci√≥n de la empresa
function obtenerInformacionEmpresa(mensaje) {
    for (const [clave, respuesta] of Object.entries(respuestas)) {
        if (mensaje.includes(clave)) {
            return respuesta;
        }
    }
    return null;
}

// ü§ñ Obtener respuesta mediante IA
async function obtenerRespuestaIA(chatId, nombreContacto) {
    if (!API_KEY) {
        console.error("‚ùå Error: API_KEY no configurada.");
        return "‚ö†Ô∏è No tengo acceso a la IA en este momento.";
    }
    try {
        const historial = historialChats[chatId] || [];
        const prompt = `Eres Eddam, el asistente virtual de Tecno Digital Per√∫ EIRL. Responde de manera profesional y amigable, brindando informaci√≥n sobre los servicios de la empresa.`;

        const mensajesIA = [{ role: "user", parts: [{ text: prompt }] }]
            .concat(historial.map(msg => ({ role: "user", parts: [{ text: msg }] })));

        const response = await fetch(`${API_URL}?key=${API_KEY}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ contents: mensajesIA })
        });

        if (!response.ok) {
            throw new Error(`Error de API: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        let respuesta = data?.candidates?.[0]?.content?.parts?.[0]?.text || "‚ö†Ô∏è No recib√≠ respuesta.";
        return respuesta.length > 200 ? respuesta.slice(0, 200) + "..." : respuesta;
    } catch (error) {
        console.error("‚ùå Error con Google Gemini:", error);
        return "‚ùå Error al conectar con la IA.";
    }
}

client.initialize();
